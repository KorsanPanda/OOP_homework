#include <iostream>
#include <vector>
#include <ctime>
#include <cstdlib>
using namespace std;

// Temel oyun sınıfı
class Oyun {
protected:
    int str;                                    // Satır sayısı
    int stn;                                    // Sütun sayısı
    int toplamMayin;                            // Oyundaki toplam mayın sayısı

public:
    Oyun(int str, int stn, int mayin) : str(str), stn(stn), toplamMayin(mayin) {}
    virtual void tahtaGoster() = 0;             // Tahtayı görüntülemek için sanal fonksiyon
    virtual bool hamleYap(int x, int y) = 0;    // Hamle yapma işlemi
    virtual bool kazandiMi() = 0;               // Oyuncunun kazanıp kazanmadığını kontrol eder
    virtual ~Oyun() {}
};

// Hücre sınıfı
class Hucre {
public:
    bool mayinMi;      // Hücrede mayın olup olmadığını kontrol eder
    bool acildiMi;     // Hücrenin açılıp açılmadığını kontrol eder
    int komsuMayinlar; // Hücrenin çevresindeki mayın sayısını tutar

    Hucre() : mayinMi(false), acildiMi(false), komsuMayinlar(0) {} // Varsayılan değerleri ayarlar
};
// MAYIN TARLASI SINIFI
class MayinTarlasi : public Oyun {
private:
    vector<vector<Hucre>> alan; // OYUN ALANINI TEMSİL EDER

    // GEÇERLİ BİR HÜCRE Mİ DİYE KONTROL YAPAR
    bool gecerliHucreMi(int x, int y) {
        return x >= 0 && x < str && y >= 0 && y < stn;
    }

    // MAYINLARI RASTGELE YERLEŞTİRİR
    void mayinlariYerlestir() {
        int yerlestirilenMayin = 0;
        srand(time(0)); // ZAMANA BAĞLI RASTGELE SAYI ÜRETME

        while (yerlestirilenMayin < toplamMayin) {
            int x = rand() % str;
            int y = rand() % stn;

            if (!alan[x][y].mayinMi) {
                alan[x][y].mayinMi = true; // HÜCREYE MAYIN YERLEŞTİR
                yerlestirilenMayin++;
                komsuHucreleriGuncelle(x, y); // KOMŞU HÜCRELERİN SAYACINI ARTTIR
            }
        }
    }

    // KOMŞU HÜCRELERİN ÇEVRESİNDEKİ MAYIN SAYISINI GÜNCELLER
    void komsuHucreleriGuncelle(int x, int y) {
        for (int dx = -1; dx <= 1; ++dx) {
            for (int dy = -1; dy <= 1; ++dy) {
                int nx = x + dx;
                int ny = y + dy;

                if (gecerliHucreMi(nx, ny) && !alan[nx][ny].mayinMi) {
                    alan[nx][ny].komsuMayinlar++;
                }
            }
        }
    }

    // BİR HÜCREYİ AÇAR
    void hucreAc(int x, int y) {
        if (!gecerliHucreMi(x, y) || alan[x][y].acildiMi) return;

        alan[x][y].acildiMi = true; // HÜCREYİ AÇ

        // EĞER HÜCRE BOŞSA (SIFIR), ÇEVRESİNDEKİ HÜCRELERİ AÇ
        if (alan[x][y].komsuMayinlar == 0 && !alan[x][y].mayinMi) {
            for (int dx = -1; dx <= 1; ++dx) {
                for (int dy = -1; dy <= 1; ++dy) {
                    hucreAc(x + dx, y + dy);
                }
            }
        }
    }

public:
    MayinTarlasi(int str, int stn, int mayin) : Oyun(str, stn, mayin) {
        alan.resize(str, vector<Hucre>(stn)); // Oyun alanını boyutlandır
        mayinlariYerlestir(); // Mayınları yerleştir
    }

    // Tahtayı görüntülemek için sanal fonksiyon
    void tahtaGoster() {
        for (int i = 0; i < str; ++i) {
            for (int j = 0; j < stn; ++j) {
                if (!alan[i][j].acildiMi) {
                    cout << "# "; // Açılmamış hücreler
                }
                else if (alan[i][j].mayinMi) {
                    cout << "* "; // Mayınlı hücreler
                }
                else {
                    cout << alan[i][j].komsuMayinlar << " "; // Komşu mayın sayısı
                }
            }
            cout << endl;
        }
    }

    // Hamle yapma işlemi
    bool hamleYap(int x, int y) {
        try {
            if (!gecerliHucreMi(x, y)) {
                throw out_of_range("Hatali koordinatlar girdiniz lutfen tekrar giriniz.");
            }

            if (alan[x][y].mayinMi) {
                cout << "**GAME OVER** Mayina bastiniz!" << endl;
                return false; // Oyun sona erdi
            }

            hucreAc(x, y); // Hücreyi açar
        }
        catch (const out_of_range& e) {
            cout << e.what() << endl;
            return true; // Geçersiz giriş olduğunda oyuna devam eder
        }

        return true; // Oyun devam ediyor
    }

    // Oyuncunun kazanıp kazanmadığını kontrol eder
    bool kazandiMi() {
        int acilanHucre = 0;
        for (int i = 0; i < str; ++i) {
            for (int j = 0; j < stn; ++j) {
                if (alan[i][j].acildiMi) {
                    acilanHucre++;
                }
            }
        }
        return (acilanHucre + toplamMayin == str * stn); // Kazanma koşulu
    }
};

int main() {
    int satirlar, sutunlar, mayinlar;

    MayinTarlasi oyun(satirlar, sutunlar, mayinlar);

    while (true) {
        system("cls");                       // Ekranı temizler
        oyun.tahtaGoster();                 // Tahtayı gösterir

        cout << "Satir numarasini girin: ";
        int x;
        cin >> x;
        cout << "Sutun numarasini girin: ";
        int y;
        cin >> y;

        if (!oyun.hamleYap(x, y)) break;    // Hamle başarısızsa oyun sona erer

        if (oyun.kazandiMi()) {
            cout << "Tebrikler! Kazandiniz!" << endl;
            break;                          // Oyuncu kazanırsa oyun sona erer
        }
    }

    return 0;
}
